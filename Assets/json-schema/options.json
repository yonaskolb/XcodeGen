{
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "title": "XcodeGen Options Object",
  "description": "XcodeGen Options Object.\n https://github.com/yonaskolb/XcodeGen/blob/master/Docs/ProjectSpec.md#options",
  "type": "object",
  "properties": {
    "minimumXcodeGenVersion": {
      "description": "The minimum version of XcodeGen required.",
      "type": "string"
    },
    "carthageBuildPath": {
      "description": "The path to the carthage build directory. Defaults to Carthage/Build. This is used when specifying target carthage dependencies",
      "type": "string"
    },
    "carthageExecutablePath": {
      "description": "The path to the carthage executable. Defaults to carthage. You can specify when you use custom built or locally installed Carthage using Mint, for example.",
      "type": "string"
    },
    "createIntermediateGroups": {
      "description": "If this is specified and set to true, then intermediate groups will be created for every path component between the folder containing the source and next existing group it finds or the base path. For example, when enabled if a source path is specified as Vendor/Foo/Hello.swift, the group Vendor will created as a parent of the Foo group. This can be overridden in a specific Target source",
      "type": "boolean"
    },
    "bundleIdPrefix": {
      "description": " If this is specified then any target that doesn't have an PRODUCT_BUNDLE_IDENTIFIER (via all levels of build settings) will get an autogenerated one by combining bundleIdPrefix and the target name: bundleIdPrefix.name. The target name will be stripped of all characters that aren't alphanumerics, hyphens, or periods. Underscores will be replaced with hyphens.",
      "type": "string"
    },
    "settingPresets": {
      "description": "This controls the settings that are automatically applied to the project and its targets. These are the same build settings that Xcode would add when creating a new project. Project settings are applied by config type. Target settings are applied by the product type and platform. By default this is set to all",
      "type": "string",
      "default": "all",
      "enum": ["all", "project", "targets", "none"],
      "examples": ["all", "project", "targets", "none"]
    },
    "developmentLanguage": {
      "description": " Sets the development language of the project. Defaults to en",
      "type": "string",
      "default": "en",
      "examples": ["en"]
    },
    "usesTabs": {
      "description": "If this is specified, the Xcode project will override the user's setting determining whether or not tabs or spaces should be used in the project.",
      "type": "boolean"
    },
    "indentWidth": {
      "description": " If this is specified, the Xcode project will override the user's setting for indent width in number of spaces.",
      "type": "integer"
    },
    "tabWidth": {
      "description": "If this is specified, the Xcode project will override the user's setting for indent width in number of spaces.",
      "type": "integer"
    },
    "xcodeVersion": {
      "description": "The version of Xcode. This defaults to the latest version periodically. You can specify it in the format 0910 or 9.1",
      "type": "string"
    },
    "deploymentTarget": {
      "description": "A project wide deployment target can be specified for each platform otherwise the default SDK version in Xcode will be used. This will be overridden by any custom build settings that set the deployment target eg IPHONEOS_DEPLOYMENT_TARGET. Target specific deployment targets can also be set with Target.deploymentTarget.",
      "type": "object",
      "properties": {
        "iOS": {},
        "macOS": {},
        "tvOS": {},
        "watchOS": {}
      },
      "additionalProperties": {
        "oneOf": [{ "type": "string" }, { "type": "number" }]
      }
    },
    "disabledValidations": {
      "description": "A list of validations that can be disabled if they're too strict for your use case. By default this is set to an empty array.",
      "type": "array",
      "examples": ["missingConfigs", "missingConfigFiles", "missingTestPlans"]
    },
    "defaultConfig": {
      "description": "The default configuration for command line builds from Xcode. If the configuration provided here doesn't match one in your configs key, XcodeGen will fail. If you don't set this, the first configuration alphabetically will be chosen.",
      "type": "string"
    },
    "groupSortPosition": {
      "description": "Where groups are sorted in relation to other files.",
      "type": "string",
      "default": "bottom",
      "enum": ["none", "top", "bottom"],
      "examples": ["none", "top", "bottom"]
    },
    "groupOrdering": {
      "description": "The minimum version of XcodeGen required.",
      "type": "array",
      "items": {
        "type": "object",
        "$ref": "group_ordering.json",
        "minItems": 1,
        "uniqueItems": true
      }
    },
    "transitivelyLinkDependencies": {
      "description": " If this is true then targets will link to the dependencies of their target dependencies. If a target should embed its dependencies, such as application and test bundles, it will embed these transitive dependencies as well. Some complex setups might want to set this to false and explicitly specify dependencies at every level. Targets can override this with Target.transitivelyLinkDependencies. Defaults to false",
      "default": false,
      "type": "boolean"
    },
    "generateEmptyDirectories": {
      "description": "If this is true then empty directories will be added to project too else will be missed. Defaults to false.",
      "default": false,
      "type": "boolean"
    },
    "findCarthageFrameworks": {
      "description": "When this is set to true, all the individual frameworks for Carthage framework dependencies will automatically be found. This property can be overridden individually for each carthage dependency - for more details see See findFrameworks in the Dependency section. Defaults to false.",
      "default": false,
      "type": "boolean"
    },
    "localPackagesGroup": {
      "description": "The group name that local packages are put into. This defaults to Packages",
      "type": "string"
    },
    "fileTypes": {
      "description": " A list of default file options for specific file extensions across the project. Values in Sources will overwrite these settings.",
      "type": "object",
      "additionalProperties": {
        "type": "object",
        "$ref": "file_type.json"
      }
    },
    "preGenCommand": {
      "description": "A bash command to run before the project has been generated. If the project isn't generated due to no changes when using the cache then this won't run. This is useful for running things like generating resources files before the project is regenerated.",
      "type": "string"
    },
    "postGenCommand": {
      "description": " A bash command to run after the project has been generated. If the project isn't generated due to no changes when using the cache then this won't run. This is useful for running things like pod install only if the project is actually regenerated.",
      "type": "string"
    },
    "useBaseInternationalization": {
      "description": "If this is false and your project does not include resources located in a Base.lproj directory then Base will not be included in the projects 'known regions'. The default value is true.",
      "default": true,
      "type": "boolean"
    },
    "schemePathPrefix": {
      "description": "A path prefix for relative paths in schemes, such as StoreKitConfiguration. The default is \"../../\", which is suitable for non-workspace projects. For use in workspaces, use \"../\".",
      "type": "string"
    }
  }
}
